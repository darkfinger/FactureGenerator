/*
 * Program written by David Kapanga, Rogers Mukuna Kashala and Jean Robert Leriche for the OOP class's project (INF731)
 * the program is called FactureGenerator, it reads a file from disk gave by the user, 
 * and from that file, it makes a list of Article and generate a bill in a text file
 * this is the ExceptionsAPI class. a collection of ApplicationException classes that handle all Exceptions generated by our program
 * Created on Mars 1 2018
 */

using System;
namespace FactureGenerator
{
    //class for general ApplicationException
    class ExceptionsAPI : ApplicationException
    {
        private string err_msg;
        public ExceptionsAPI() : base()
        {
            this.Err_msg = "Unknow Error occured. please restart the Application";
        }
        public string Err_msg
        {
            get
            {
                return this.err_msg;
            }
            set
            {
                this.err_msg = value;
            }
        }
        public override string Message
        {
            get
            {
                return this.Err_msg;
            }
        }
    }

    //class for Exceptions occured on the article creation
    class ExceptionsOnArticleCreation : ApplicationException
    {
        private string err_msg;
        private int code;
        public ExceptionsOnArticleCreation(int code) : base()
        {
            this.Code = code;
            switch (code)
            {
                case 1:
                    this.Err_msg = "Wrong Article number found in the source file. Please make sure your source file has the correct format.";
                    break;
                case 2:
                    this.Err_msg = "Wrong Article category found in the source file. Please make sure your source file has the correct format.";
                    break;
                case 3:
                    this.Err_msg = "Wrong Article quantity found in the source file. Please make sure your source file has the correct format.";
                    break;
                case 4:
                    this.Err_msg = "Wrong Article description found in the source file. Please make sure your source file has the correct format.";
                    break;
                case 5:
                    this.Err_msg = "Wrong Article price found in the source file. Please make sure your source file has the correct format.";
                    break;
                case 6:
                    this.Err_msg = "Wrong Format on price or Quantity. Please make sure your source file has the correct format.";
                    break;
            }
        }

        public string Err_msg
        {
            get
            {
                return this.err_msg;
            }
            set
            {
                this.err_msg = value;
            }
        }
        public int Code
        {
            get
            {
                return this.code;
            }
            set
            {
                this.code = value;
            }
        }
        public override string Message
        {
            get
            {
                return this.Err_msg;
            }
        }
    }

    //class for Exceptions occured when the path or file are not in legal form
    class ExceptionFileDoesntExist : ApplicationException
    {
        private string err_msg;
        public ExceptionFileDoesntExist() : base()
        {
            this.Err_msg = "incorrect path or file doesn't exist, the program will close.";
        }
        public string Err_msg
        {
            get
            {
                return this.err_msg;
            }
            set
            {
                this.err_msg = value;
            }
        }
        public override string Message
        {
            get
            {
                return this.Err_msg;
            }
        }
    }

    //class for Exceptions occured during different operation on Facture
    class ExceptionsOnFacture : ApplicationException
    {
        private string err_msg;
        public ExceptionsOnFacture(int code) : base()
        {
            switch (code)
            {
                case 1:
                    this.Err_msg = "Wrong Facture name send when creating a facture. Please make sure your destination file will be 'facture-Name_of_Source_file'";
                    break;
                case 2:
                    this.Err_msg = "The source path of the file is not of a legal form. ";
                    break;
                case 3:
                    this.Err_msg = "The destination path of the bill is not of a legal form.";
                    break;
                case 4:
                    this.Err_msg = "Wrong source file name. Please make sure your file exist and has correct format.";
                    break;
                case 5:
                    this.Err_msg = "uncompatible list found when assigning the article list from source file to the articleList attribut of Facture. \nPlease make sure your source file has the correct format ";
                    break;
                case 6:
                    this.Err_msg = "an Error occurred while trying to read the source file. Please Make sure the file exist or you have permission to read on disk";
                    break;
                case 7:
                    this.Err_msg = "Index error, your source file must have 5 attribut per article (article number, category, quantity, description and price).\nPlease make sure your source file has the correct format";
                    break;
            }
        }
        public string Err_msg
        {
            get
            {
                return this.err_msg;
            }
            set
            {
                this.err_msg = value;
            }
        }
        public override string Message
        {
            get
            {
                return this.Err_msg;
            }
        }
    }

    //class for Exceptions occured on the program's status
    class ExceptionStatus : ApplicationException
    {
        private string err_msg;
        public ExceptionStatus() : base()
        {
            this.Err_msg = "incorrect status assigned to the program. restart please";
        }
        public string Err_msg
        {
            get
            {
                return this.err_msg;
            }
            set
            {
                this.err_msg = value;
            }
        }
        public override string Message
        {
            get
            {
                return this.Err_msg;
            }
        }
    }

    //class for Exceptions occured when generating the output file.
    class ExceptionOnGeneratingFille : ApplicationException
    {
        private string err_msg;
        public ExceptionOnGeneratingFille() : base()
        {
            this.Err_msg = "Operation failed, an unknown Error accured (Try to verified that you have permission to write on disk) \n";
        }
        public string Err_msg
        {
            get
            {
                return this.err_msg;
            }
            set
            {
                this.err_msg = value;
            }
        }
        public override string Message
        {
            get
            {
                return this.Err_msg;
            }
        }
    }
}
